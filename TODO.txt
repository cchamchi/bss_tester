DONE:

A weighting function - now really done
compute something like a spectrogram from a wav file

apply a_weighting to spectrograms

detect speech intervals 

need to filter the signal in time domain, or before log operation


Researching DSP
http://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.signal.freqz.html
-.- http://www.dspguide.com/ch16.htm

verifying filter characteristic - or create and test filter in frequency domain

compute gain values for targeted SNR
 - only take into account the frames which contain speech
 - compute the average amplitude of signal (after a_weigthing, in dB) for each frame 
 - compute the average amplitude over both signals, and the difference (in dB)
 - deduce the necessary gain value, apply to the signals (taking into account the possibility of overflow)
 - recheck if result really corresponds to desired SNR

mix at the specified SNR - compute the speech-to-noise ratio using spectrograms and a-weighting,
and then just mix the signals with a certain amplitude

amplify speech and noise to a standardized amplitude (actually not important because in ASR it will be normalized)
- should ntentionally randomize this to train the network to be robust to signal level differences (MAYBE LATER)

IN PROGRESS

brutal idea - mine speech samples from online audio books, and automatically
generate short audio segments with approximate transcripts 


Make the code work for stereo signals also (for matKAM).
 
TODO:



automate testing

results & presentation
FUTURE:

once done, try out currennt

